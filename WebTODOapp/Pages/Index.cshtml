@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    Layout = null;
}
@if (!User.Identity.IsAuthenticated)
{
    Response.Redirect("Identity/Account/Login");
}

<!DOCTYPE html>
<html>
<head>
    <title>TO DO</title>

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <link href="https://fonts.googleapis.com/css?family=Montserrat&display=swap" rel="stylesheet">

    <style type="text/css">
        body {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradient 15s ease infinite;
        }

        @@keyframes gradient {
            0% {
                background-position: 0% 50%;
            }

            50% {
                background-position: 100% 50%;
            }

            100% {
                background-position: 0% 50%;
            }
        }

        #task-container {
            max-width: 600px;
            margin: 0 auto;
            box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
            background-color: #fff;
            margin-top: 100px;
            margin-bottom: 0px;
            justify-content: space-around;
            align-items: flex-start;
        }

        #form-wrapper {
            position: -webkit-sticky;
            position: sticky;
            top: 0rem;
            border-bottom: 1px solid #e9e9e9;
            background-color: #fff;
            box-shadow: 0 3px 8px rgba(0,0,0,0.25);
            padding: 40px;
        }

        .flex-wrapper {
            display: flex;
        }

        .task-wrapper {
            margin: 5px;
            padding: 5px;
            padding: 20px;
            cursor: pointer;
            border-bottom: 1px solid #e9e9e9;
            color: #686868;
        }
    </style>

</head>
<body runat="server" id="pageBody">
    <div class="container">

        <div id="task-container">
            <div id="form-wrapper">
                <form id="form">
                    <div class="flex-wrapper">
                        <div class="input-group" style="flex: 6">
                            <input id="title" class="form-control" type="text" name="title" placeholder="Add task">
                            <div class="input-group-append">
                                <input id="submit" class="btn btn-outline-secondary" type="submit" value="Submit">
                            </div>
                        </div>

                    </div>
                </form>
            </div>
        </div>
        <div id="list-wrapper" class="row">

        </div>
        
    </div>

    <script type="text/javascript">
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
        //var csrftoken = getCookie('csrftoken');

        var activeItem = null
        var list_snapshot = []

        buildList()

        function buildList() {
            var wrapper = document.getElementById('list-wrapper')
            //wrapper.innerHTML = ''
            var url = '/api/ToDoModels/';

            fetch(url)
                .then((resp) => resp.json())
                .then(function (data) {
                    console.log('Data:', data)

                    var list = data
                    for (var i in list) {
                        try {
                            document.getElementById(`data-row-${i}`).remove()
                        }
                        catch (err) {

                        }
                        var color = list[i].color
                        
                        var title = `<span class="title">${list[i].title}</span>`
                        if (list[i].completed == true) {
                            title = `<strike class="title">${list[i].title}</strike>`
                        }

                        var item = ` 
                                        <div id="data-row-${i}" style="margin-right: auto;margin-left: auto;padding-left: auto;border-left-width: 0px;border-left-style: solid;border-right-width: 0px;border-right-style: solid;margin-top: 10px;" >
                                            <div class="col-auto">
                                                <div style="width: 18rem;margin-left: auto;margin-right: auto; background-color: ${color}" class="card task-wrapper flex-wrapper">
                                                    <img class="card-img-top" src="..." alt="">
                                                        <div class="card-body" style="margin-left: 0px;">
                                                            <h5 class="card-title">${title}</h5>
                                                            <select class="form-select form-select-sm color" id="select-${list[i].id}" name="select">
                                                              <option   value="white" style="background-color: white">⬜</option>
                                                              <option   value="aquamarine" style="background-color: aquamarine"></option>
                                                              <option   value="orange" style="background-color: orange"></option>
                                                              <option   value="yellow" style="background-color: yellow"></option>
                                                              <option   value="yellowgreen" style="background-color: yellowgreen"></option>
                                                            </select>
                                                            <button class="btn btn-sm btn-outline-info edit">Edit </button>
                                                            <button class="btn btn-sm btn-outline-danger delete">Delete</button>
                                                        </div>
                                                        <div class="card-footer text-muted">
                                                            Date: ${list[i].date_of_creation.replace(/T/, ' ').replace(/\..+/, '')}                                                            
                                                        </div>
                                                </div>
                                            </div>
                                        </div>
                                               

                                                                        `
                        wrapper.innerHTML += item

                    }

                    if (list_snapshot.length > list.length) {
                        for (var i = list.length; i < list_snapshot.length; i++) {
                            document.getElementById(`data-row-${i}`).remove()
                        }
                    }

                    list_snapshot = list


                    for (var i in list) {
                        var editBtn = document.getElementsByClassName('edit')[i]
                        var colorbtn = document.getElementsByClassName('color')[i]
                        var deleteBtn = document.getElementsByClassName('delete')[i]
                        var title = document.getElementsByClassName('title')[i]

                        editBtn.addEventListener('click', (function (item) {
                            return function () {
                                editItem(item)
                            }
                        })(list[i]))

                        colorbtn.addEventListener('click', (function (item) {
                            return function () {
                                colorchanged(item)
                            }
                        })(list[i]))


                        deleteBtn.addEventListener('click', (function (item) {
                            return function () {
                                deleteItem(item)
                            }
                        })(list[i]))


                        title.addEventListener('click', (function (item) {
                            return function () {
                                strikeUnstrike(item)
                            }
                        })(list[i]))

                    }


                })
        }


        var form = document.getElementById('form-wrapper')
        form.addEventListener('submit', function (e) {
            e.preventDefault()
            console.log('Form submitted')
            var urlpost = '/api/ToDoModels';
            var title = document.getElementById('title').value
            const myBody = { 'id': 0, 'title': title, 'completed': false, 'color': 'white' };
            if (activeItem != null) {
                var urlput = `/api/ToDoModels/${activeItem.id}`;
                myBody.id = activeItem.id;
                myBody.completed = activeItem.completed;
                putTodo(urlput, JSON.stringify(myBody));
                activeItem = null
            }
            else {
                postTodo(urlpost, JSON.stringify(myBody));
            }

        })

        function postTodo(url, myBody) {
            console.log('postTodo', url, myBody);
            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-type': 'application/json',
                },
                body: myBody,
            }
            ).then(function (response) {
                buildList()
                document.getElementById('form').reset()
            })
        }

        function putTodo(url, myBody) {
            console.log('putTodo', url, myBody);
            fetch(url, {
                method: 'PUT',
                headers: {
                    'Content-type': 'application/json',
                },
                body: myBody,
            }
            ).then(function (response) {
                buildList()
                document.getElementById('form').reset()
            })
        }


        function editItem(item) {
            console.log('Item clicked:', item)
            activeItem = item
            document.getElementById('title').value = activeItem.title
        }


        function deleteItem(item) {
            console.log('Delete clicked')
            
            fetch(`/api/ToDoModels/${item.id}/`, {
                method: 'DELETE',
                headers: {
                    'Content-type': 'application/json',
                },
            }).then((response) => {
                buildList()
            })
        }

        function strikeUnstrike(item) {
            console.log('Strike clicked');
            item.completed = !item.completed;
            const myBody = JSON.stringify({ 'id': item.id, 'title': item.title, 'completed': item.completed, 'color': item.color });
            const myUrl = `/api/ToDoModels/${item.id}`;
            console.log(myBody);
            fetch(myUrl, {
                method: 'PUT',
                headers: {
                    'Content-type': 'application/json',
                },
                body: myBody,
            }).then((response) => {
                buildList()
            })
        }

        function colorchanged(item) {
            console.log('select-' + item.id)
            var colors = document.getElementById('select-' + item.id).value;
            item.color = colors;
            document.getElementById('select-' + item.id).parentNode.parentNode.style.backgroundColor = colors
            const myBody = JSON.stringify({ 'id': item.id, 'title': item.title, 'completed': item.completed, 'color': item.color });
            const myUrl = `/api/ToDoModels/${item.id}`;
            console.log(myBody);
            fetch(myUrl, {
                method: 'PUT',
                headers: {
                    'Content-type': 'application/json',
                },
                body: myBody,
            }).then((response) => {
                buildList()
            })
        }
    </script>

</body>
</html>
